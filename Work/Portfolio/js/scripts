document.addEventListener("DOMContentLoaded", function () {


    const navBurger = document.getElementById("burger");
    const burgOpen = navBurger.querySelector(".nav-burger-open");
    const burgClosed = navBurger.querySelector(".nav-burger-closed");

    function toggleBurger() {


        //open nav menu
        if (burgOpen.classList.contains('hidden')) {
            burgOpen.classList.remove('hidden');
            burgClosed.classList.add('hidden');

        }

        //Close nav menu
        else if (burgClosed.classList.contains('hidden')) {
            burgClosed.classList.remove('hidden');
            burgOpen.classList.add('hidden');
        }

    }


    navBurger.addEventListener('touchend', toggleBurger);

    navBurger.addEventListener('click', toggleBurger);

    // Select all .q-answer elements
    const items = document.querySelectorAll(".q-answer");
    let touchDetected = false;
    let elementOpen = false;
    let elementClosed = true;
    // Add an event listener to each .q-answer for both touchstart and click
    items.forEach((item) => {
        // Handle click and touchstart events
        item.addEventListener('touchend', handleInteraction);
        item.addEventListener("click", handleInteraction);

        // Event handler function for interaction (click or tap)
        function handleInteraction(event) {

            if (event.type === "touchend") {
                touchDetected = true;
            }

            // Skip the click event if a touch was detected
            if (event.type === "click" && touchDetected) {
                touchDetected = false; // Reset for next interaction
                return;
            }



            // Access the .q-content element within the clicked item
            const section = item.querySelector(".q-section");
            const content = item.querySelector(".q-content");
            const plusSymbol = item.querySelector(".q-symbol-plus");
            const minusSymbol = item.querySelector(".q-symbol-minus");

            const sectionId = section.id;

            const sectionElement = document.getElementById(sectionId);

            if (content.classList.contains("q-content-closed")) {
                section.classList.add("q-section-open");
                // Immediately remove the 'hidden' class to make it visible
                content.classList.remove("hidden");
                if (plusSymbol) plusSymbol.classList.add("hidden");
                if (minusSymbol) minusSymbol.classList.remove("hidden");
                if (sectionElement) sectionElement.classList.add("q-content-borders");

                // Use a short delay to give the browser a chance to reflow
                setTimeout(() => {
                    // Now, remove 'q-content-closed' and add 'q-content-open' to trigger animation
                    content.classList.remove("q-content-closed");
                    content.classList.add("q-content-open");
                }, 10); // A small delay (e.g., 20ms) to trigger the transition
            } else if (content.classList.contains("q-content-open")) {

                section.classList.remove("q-section-open");
                if (plusSymbol) plusSymbol.classList.remove("hidden");
                if (minusSymbol) minusSymbol.classList.add("hidden");
                if (sectionElement)
                    sectionElement.classList.remove("q-content-borders");

                // When it's open, close it and add the 'q-content-closed' class
                content.classList.remove("q-content-open");
                content.classList.add("q-content-closed");

                // Listen for the transition end to hide the element completely
                content.addEventListener("transitionend", function transitionEnd() {
                    if (content.classList.contains("q-content-open")) {
                        return;
                    } else {

                        content.classList.add("hidden"); // Add hidden class to set display: none
                        content.removeEventListener("transitionend", transitionEnd); // Remove the listener after it's fired
                    }

                });
            }

            // Optional: Prevent default behavior for touchstart to avoid double-tap zoom

        }
    });
});
